Key commands:
ls -a # shows all files including those hidden
git init # initialize new repository
git status # basic details

What happens when you initialize a repository? Why do you need to 
do it?

Doesn't appear that much happens as it lists files but any changes 
to those files will be unchanged. I need the repo if I want to 
commit and track changes to files.

Key commands:

git add <filename> # add to staging area
git status
git commit
git log

How is the staging area different from the working directory and
the repository? What value do you think it offers?

Staging area appears to be a temporary holding station. Not sure
what value it offers, but it does allow a few files to be added
and then commit at the same time to the repo.

Working directory appears to hold all untracked files and is marked 
'clean' when all files have been commit.

Key commands:

git diff # to compare working directory to staging area
git diff --staged # to compare staging area to repository
git reset --hard # discards any changes to working directory and
staging area !! be very careful when using this !!
git checkout master # return to HEAD

How can you use the staging area to make sure you have one commit 
per logical change?

You can compare the changes to the previous commit; it is also 
helpful to separate the file you want to commit from the rest of
the files in the working directory.

## Branches ##

git branch # view list of branches, * refers to checked out branch
git branch <branch name> # make new branch
git checkout <branch name> # switch to new branch

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful if you want to experiment with code but keep
a working copy on another branch; if you have two unique versions
of code that do different things (different levels); etc.

git log --graph --oneline <branch 1> <branch 2>

git checkout -b <new branch name> # if checkout earlier commit, make
a change, and then need to give it a new branch name or else that 
commit will be unreachable

How do the diagrams help you visualize the branch structure?

It is key for demonstratic the sequential and non-linear order of 
commits and branches.

If a branch is deleted and leaves some commits unreachable from 
existing branches, those commits will continue to be accessible by 
commit id, until Gitâ€™s garbage collection runs. This will happen 
automatically from time to time, unless you actively turn it off. 
You can also run this process manually with git gc.

%% Merge %%

git merge master <2nd branch name> # make sure to checkout one of
the two branches being merged 1st
git show <command_id> # show what changes occurred between a commit 
and its parent
git branch -d <branch2> # deletes branch label (and not commits)
once merged

What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?

Merging two branches together results in one branch. Representing
in diagram is important to help visualize and check the merge.